<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.chat.mapper.MessageMapper">

    <select id="queryConversationCount" resultType="int">
        select count(m.maxid)
        from (select max(id) as maxid
              from message
              where status != 2
                      and from_id != 1
                      and (from_id = #{userId}
                 or to_id = #{userId})
              group by conversation_id) as m
    </select>


    <select id="queryNoticeAllCount" resultType="int">
        select count(id)
        from message
        where from_id = 1
          and to_id = #{userId}
          and conversation_id = #{topic}
    </select>


    <!--TODO 去除多余字段-->
    <select id="queryLetterCount" resultType="int">
        select count(id)
        from message
        where status != 2
                  and from_id != 1
                  and conversation_id = #{conversationId}
    </select>

    <select id="queryConversations" resultType="Message">
        select *
        from message
        where id in (select max(id)
                     from message
                     where status
            != 2
          and from_id != 1
          and (from_id = #{userId}
           or to_id = #{userId})
        group by conversation_id)
        order by id desc limit #{offset}, #{limit}
    </select>

    <select id="queryLetterUnreadCount" resultType="int">
        select count(id)
        from message
        where status = 0
          and from_id != 1
          and to_id = #{userId}
          and conversation_id = #{conversationId}
    </select>

    <select id="queryLetterUnreadCountWithoutCid" resultType="int">
        select count(id)
        from message
        where status = 0
          and from_id != 1
          and to_id = #{userId}
    </select>

    <select id="queryNoticeUnreadCount" resultType="int">
        select count(id) from message
        where status = 0
        and from_id = 1
        and to_id = #{userId}
        <if test="topic!=null">
            and conversation_id = #{topic}
        </if>
    </select>


    <select id="queryChatToMeIds" resultType="integer">
        SELECT DISTINCT(from_id)
        FROM (SELECT from_id, create_time
              FROM message
              WHERE to_id = #{userId}
                and conversation_id != 'inform.message.like' and conversation_id != 'inform.message.follow'
              ORDER BY create_time DESC) tmep
    </select>

    <select id="queryMeChatToIds" resultType="integer">
        SELECT DISTINCT(to_id)
        FROM (SELECT to_id, create_time
              FROM message
              WHERE from_id = #{userId}
                AND conversation_id != 'inform.message.like' and conversation_id != 'inform.message.follow'
              ORDER BY create_time DESC) tmep
    </select>


    <select id="queryChatList" resultType="Message">
        select *
        from message
        where from_id != 1
            and conversation_id = #{conversation_id}
        order by create_time asc
    </select>

    <sql id="selectFields">
        id
        , from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <update id="updateStatus">
        update message set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>


    <select id="queryAllMessage" resultType="Message">
        select
        <include refid="selectFields"></include>
        from message
        where from_id = 1
        and to_id = #{id}
        and conversation_id = #{topic}
        order by create_time desc
        limit #{offset}, #{limit}
    </select>


    <sql id="insertFields">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <insert id="insertMessage" parameterType="Message" keyProperty="id">
        insert into message(<include refid="insertFields"></include>)
        values(#{fromId},#{toId},#{conversationId},#{content},#{status},#{createTime})
    </insert>
</mapper>